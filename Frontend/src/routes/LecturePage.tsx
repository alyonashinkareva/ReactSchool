import React, {useState, useEffect} from 'react';
import {useParams, useNavigate} from 'react-router-dom';
import Header from '../components/Header';
import CourseTitle from '../components/CourseTitle';
import LessonNavigation from '../components/LessonNavigation';
import LessonContent from '../components/LessonContent';
import Presentation from '../components/Presentation';
import '../styles/LecturePage.css';
import AuthModal from '../components/AuthModal';
import { useAuth } from '../contexts/AuthContext';
import LikeDislike from '../components/LikeDislike';
import { ratingService } from '../services/commentService';
import progressService from '../services/progressService';
import FeedbackModal from '../components/FeedbackModal/FeedbackModal';
import { CoursesApi } from '../api/coursesApi';
import { Lecture, Course } from '../types/courses';
import { coursesService } from '../services/coursesService';
import CoursePlayer from '../components/CoursePlayer';
import LectureComments from '../components/LectureComments/LectureComments';

interface QuizResult {
    lectureId: number;
    courseId: number;
    userId: number;
    score: number;
    correctAnswers: number;
    totalQuestions: number;
    answers: (number | null)[];
    completed: boolean;
    attemptDate: string;
    timeSpent: number;
}

// interface Rating {
//     value: number;
//     count: number;
// }

interface QuizQuestion {
    id: number;
    question: string;
    options: string[];
    correctAnswer: number;
    hint: string;
}

const quizQuestions: QuizQuestion[] = [
    {
        id: 1,
        question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python –∏ –¥–ª—è —á–µ–≥–æ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?",
        options: [
            "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python ‚Äî —ç—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, —Ç–∏–ø –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python ‚Äî —ç—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –∏—Ö —Ç–∏–ø —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω.",
            "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö.",
            "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python ‚Äî —ç—Ç–æ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
        ],
        correctAnswer: 0,
        hint: "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í Python –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–∏–±–∫–∏–µ –∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–π —Ç–∏–ø –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏. –û–Ω–∏ —Å–ª—É–∂–∞—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
    },
    {
        id: 2,
        question: "–ö–∞–∫–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –ù–ï —è–≤–ª—è–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤ Python?",
        options: [
            "int (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞)",
            "str (—Å—Ç—Ä–æ–∫–∏)",
            "decimal (–¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏)",
            "list (—Å–ø–∏—Å–∫–∏)"
        ],
        correctAnswer: 2,
        hint: "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ Python, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –º–æ–¥—É–ª–µ–π."
    },
    {
        id: 3,
        question: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥: print(type(5.0))?",
        options: [
            "<class 'int'>",
            "<class 'float'>",
            "<class 'str'>",
            "<class 'number'>"
        ],
        correctAnswer: 1,
        hint: "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ß–∏—Å–ª–æ 5.0 –∏–º–µ–µ—Ç –¥–µ—Å—è—Ç–∏—á–Ω—É—é —Ç–æ—á–∫—É, —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö."
    },
    {
        id: 4,
        question: "–ö–∞–∫–∞—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ—à–∏–±–∫–µ –≤ Python?",
        options: [
            "x = 10; y = '20'; result = x + int(y)",
            "x = 10; y = '20'; result = str(x) + y",
            "x = 10; y = '20'; result = x + y",
            "x = 10; y = 20; result = x + y"
        ],
        correctAnswer: 2,
        hint: "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: Python –Ω–µ –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å —á–∏—Å–ª–∞ –∏ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤."
    },
    {
        id: 5,
        question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç '–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è' –≤ Python?",
        options: [
            "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞",
            "Python –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö",
            "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"
        ],
        correctAnswer: 0,
        hint: "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏, —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–µ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏, –∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã."
    }
];

const LecturePage: React.FC = () => {
    const {courseId, lectureId} = useParams<{ courseId: string; lectureId: string }>();
    const { user, isAuthenticated } = useAuth();
    const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
    const [likes, setLikes] = useState(0);
    const [userRating, setUserRating] = useState<boolean | null>(null);

    const [course, setCourse] = useState<Course | null>(null);
    const [lecture, setLecture] = useState<Lecture | null>(null);
    const [nextLecture, setNextLecture] = useState<Lecture | null>(null);
    const [prevLecture, setPrevLecture] = useState<Lecture | null>(null);
    const [loading, setLoading] = useState(true);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–≤–∏–∑–∞
    const [isQuizStarted, setIsQuizStarted] = useState(false);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
    const [answers, setAnswers] = useState<(number | null)[]>(new Array(quizQuestions.length).fill(null));
    const [showResults, setShowResults] = useState(false);
    const [showAnswerFeedback, setShowAnswerFeedback] = useState(false);
    const [quizVisible, setQuizVisible] = useState(false);
    const [showHint, setShowHint] = useState(false);
    const [isFeedbackModalOpen, setIsFeedbackModalOpen] = useState(false);
    const [quizStartTime, setQuizStartTime] = useState<number | null>(null);
    const [savedQuizResult, setSavedQuizResult] = useState<QuizResult | null>(null);
    const coursesApi = new CoursesApi();
    const navigate = useNavigate();

    useEffect(() => {
        const loadCourses = async () => {
            await coursesApi.getCourses();
        };
        loadCourses();
    }, []);

    useEffect(() => {
        const loadData = async () => {
            if (!courseId || !lectureId) return;
            
            const numericCourseId = parseInt(courseId, 10);
            const numericLectureId = parseInt(lectureId, 10);
            
            if (isNaN(numericCourseId) || isNaN(numericLectureId)) {
                navigate('/courses');
                return;
    }

            try {
                const [courseData, lectureData] = await Promise.all([
                    coursesService.getCourse(numericCourseId),
                    coursesService.getLecture(numericCourseId, numericLectureId)
                ]);

                if (!courseData || !lectureData) {
                    navigate('/courses');
                    return;
                }

                setCourse(courseData);
                setLecture(lectureData);

                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                console.log('Loaded lecture data:', lectureData);
                console.log('Lecture presentationSlides:', lectureData.presentationSlides);

                const [next, prev] = await Promise.all([
                    coursesService.getNextLecture(numericCourseId, numericLectureId),
                    coursesService.getPreviousLecture(numericCourseId, numericLectureId)
                ]);

                setNextLecture(next);
                setPrevLecture(prev);
            } catch (error) {
                console.error('Error loading lecture data:', error);
                navigate('/courses');
            } finally {
                setLoading(false);
            }
        };

        loadData();
    }, [courseId, lectureId, navigate]);

    useEffect(() => {
        if (courseId && lectureId) {
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
            const stats = ratingService.getRatingStats(courseId, lectureId);
            setLikes(stats.likes);

            // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            if (isAuthenticated && user) {
                const userRating = ratingService.getUserRating(courseId, lectureId, user.id);
                setUserRating(userRating ? userRating.like : null);
            } else {
                // –°–±—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                setUserRating(null);
            }
        }
    }, [courseId, lectureId, isAuthenticated, user]);

    useEffect(() => {
        if (isAuthenticated && user && courseId && lectureId && course?.lectures) {
            // –ü–æ–º–µ—á–∞–µ–º –ª–µ–∫—Ü–∏—é –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—É—é –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ
            progressService.updateProgressWithTotal(
                parseInt(courseId, 10), 
                lectureId, 
                user.id, 
                course.lectures.length
            );
            
            progressService.updateLectureProgress(
                lectureId,
                user.id,
                0, // watchedDuration
                course.lectures.length // totalDuration
            );
        }
    }, [isAuthenticated, user, courseId, lectureId, course?.lectures]);

    const navigationProps = {
        prevLesson: prevLecture
            ? {
                title: prevLecture.title,
                url: `/courses/${courseId}/lectures/${prevLecture.id}`
            }
            : undefined,
        nextLesson: nextLecture
            ? {
                title: nextLecture.title,
                url: `/courses/${courseId}/lectures/${nextLecture.id}`
            }
            : undefined
    };

    const openAuthModal = () => {
        setIsAuthModalOpen(true);
    };

    const closeAuthModal = () => {
        setIsAuthModalOpen(false);
    };



    const handleLike = () => {
        if (!isAuthenticated) {
            openAuthModal();
            return;
        }
        if (courseId && lectureId && user) {
            // –ï—Å–ª–∏ —É–∂–µ —Å—Ç–æ–∏—Ç –ª–∞–π–∫ - —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
            if (userRating === true) {
                ratingService.removeRating(courseId, lectureId, user.id);
                setLikes(prev => prev - 1);
                setUserRating(null);
            } 
            // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏ (–≤–∫–ª—é—á–∞—è –±—ã–≤—à–∏–π –¥–∏–∑–ª–∞–π–∫) - —Å—Ç–∞–≤–∏–º –ª–∞–π–∫
            else {
                ratingService.setRating(courseId, lectureId, user.id, true);
                setLikes(prev => prev + 1);
                if (userRating === false) { // –ï—Å–ª–∏ –±—ã–ª –¥–∏–∑–ª–∞–π–∫, —É–±–∏—Ä–∞–µ–º –µ–≥–æ (—Ö–æ—Ç—è –¥–∏–∑–ª–∞–π–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è)
                    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–∏–∑–ª–∞–π–∫–æ–≤ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö –Ω–µ —Å—á–∏—Ç–∞–µ–º –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                }
                setUserRating(true);
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
            window.dispatchEvent(new CustomEvent('favoritesChanged', { 
                detail: { userId: user.id } 
            }));
        }
    };

    const handleDislike = () => {
        if (!isAuthenticated) {
            openAuthModal();
            return;
        }
        if (courseId && lectureId && user) {
            // –ï—Å–ª–∏ —É–∂–µ —Å—Ç–æ–∏—Ç –¥–∏–∑–ª–∞–π–∫ - —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
            if (userRating === false) {
                ratingService.removeRating(courseId, lectureId, user.id);
                setUserRating(null);
            } 
            // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏ –∏–ª–∏ —Å—Ç–æ—è–ª –ª–∞–π–∫ - —Å—Ç–∞–≤–∏–º –¥–∏–∑–ª–∞–π–∫
            else {
                ratingService.setRating(courseId, lectureId, user.id, false);
                if (userRating === true) { // –ï—Å–ª–∏ –±—ã–ª –ª–∞–π–∫, —É–±–∏—Ä–∞–µ–º –µ–≥–æ
                    setLikes(prev => prev - 1);
                }
                setUserRating(false);
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
            window.dispatchEvent(new CustomEvent('favoritesChanged', { 
                detail: { userId: user.id } 
            }));
        }
    };

    const closeFeedbackModal = () => {
        setIsFeedbackModalOpen(false);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º)
    const handleFeedbackSubmit = (feedback: string) => {
        console.log('Feedback submitted:', feedback);
        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        closeFeedbackModal();
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–≤–∏–∑–∞
    const handleStartQuiz = () => {
        setIsQuizStarted(true);
        setQuizVisible(true);
        setCurrentQuestionIndex(0);
        setSelectedAnswer(null);
        setAnswers(new Array(quizQuestions.length).fill(null));
        setShowResults(false);
        setShowAnswerFeedback(false);
        setQuizStartTime(Date.now());
    };

    const handleAnswerSelect = (answerIndex: number) => {
        if (showAnswerFeedback) return;
        setSelectedAnswer(answerIndex);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
        const newAnswers = [...answers];
        newAnswers[currentQuestionIndex] = answerIndex;
        setAnswers(newAnswers);
    };

    const handleNextQuestion = () => {
        if (currentQuestionIndex < quizQuestions.length - 1) {
            setCurrentQuestionIndex(currentQuestionIndex + 1);
            setSelectedAnswer(answers[currentQuestionIndex + 1]);
            setShowAnswerFeedback(false);
            setShowHint(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        } else {
            // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–∏–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            saveQuizResult();
            setShowResults(true);
            setIsQuizStarted(false);
            setQuizVisible(false);
        }
    };

    const handleAnswerSubmit = () => {
        if (selectedAnswer === null || showAnswerFeedback) return;
        setShowAnswerFeedback(true);
        setShowHint(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            handleNextQuestion();
        }, 1500);
    };

    const handleRetryQuiz = () => {
        // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫–≤–∏–∑–∞
        setShowResults(false);
        setIsQuizStarted(false);
        setQuizVisible(false);
        setCurrentQuestionIndex(0);
        setSelectedAnswer(null);
        setAnswers(new Array(quizQuestions.length).fill(null));
        setShowAnswerFeedback(false);
        setShowHint(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        setQuizStartTime(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        setSavedQuizResult(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫
        setTimeout(() => {
            setIsQuizStarted(true);
            setQuizVisible(true);
            setQuizStartTime(Date.now()); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        }, 100);
    };

    const handleShowHint = () => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        setShowHint(true);
    };

    const calculateScore = () => {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (savedQuizResult) {
            return savedQuizResult.score;
        }
        
        // –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        const correctAnswers = answers.filter((answer, index) => 
            answer !== null && answer !== -1 && answer === quizQuestions[index].correctAnswer
        ).length;
        return Math.round((correctAnswers / quizQuestions.length) * 100);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const getCorrectAnswersCount = () => {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (savedQuizResult) {
            return savedQuizResult.correctAnswers;
        }
        
        // –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        return answers.filter((answer, index) => 
            answer !== null && answer !== -1 && answer === quizQuestions[index].correctAnswer
        ).length;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–≤–∏–∑–∞
    const saveQuizResult = () => {
        if (!isAuthenticated || !user || !courseId || !lectureId || quizStartTime === null) return;
        
        const correctAnswers = answers.filter((answer, index) => 
            answer !== null && answer !== -1 && answer === quizQuestions[index].correctAnswer
        ).length;
        const score = Math.round((correctAnswers / quizQuestions.length) * 100);
        const timeSpent = Math.round((Date.now() - quizStartTime) / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        const quizResult: QuizResult = {
            lectureId: parseInt(lectureId, 10),
            courseId: parseInt(courseId, 10),
            userId: 1, // Using 1 as fallback numeric ID for QuizResult interface
            score,
            correctAnswers,
            totalQuestions: quizQuestions.length,
            answers: [...answers],
            completed: true,
            attemptDate: new Date().toISOString(),
            timeSpent
        };

        if (user) {
            progressService.saveQuizResult(quizResult, user.id);
        }
        setSavedQuizResult(quizResult);
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–≤–∏–∑–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        const loadQuizResult = async () => {
        if (isAuthenticated && user && courseId && lectureId) {
                const savedResult = await progressService.getQuizResult(
                    parseInt(courseId, 10),
                    parseInt(lectureId, 10),
                    user.id
                );
            if (savedResult && savedResult.completed) {
                setSavedQuizResult(savedResult);
                setAnswers(savedResult.answers);
                setShowResults(true);
                setIsQuizStarted(false);
                setQuizVisible(false);
            }
        } else {
            setSavedQuizResult(null);
            setShowResults(false);
            setAnswers(new Array(quizQuestions.length).fill(null));
        }
        };
        loadQuizResult();
    }, [isAuthenticated, user, courseId, lectureId]);

    const renderQuizContent = () => {
        if (!isQuizStarted && !showResults) {
            return (
                <div className="quiz-banner">
                    <div className="quiz-banner__icon">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            <path d="M9.09 9C9.3251 8.33167 9.78915 7.76811 10.4 7.40913C11.0108 7.05016 11.7289 6.91894 12.4272 7.03871C13.1255 7.15849 13.7588 7.52152 14.2151 8.06353C14.6713 8.60553 14.9211 9.29152 14.92 10C14.92 12 11.92 13 11.92 13" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            <path d="M12 17H12.01" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                    </div>
                    <div className="quiz-banner__content">
                        <h3 className="quiz-banner__title">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è</h3>
                        <p className="quiz-banner__subtitle">–ü—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ª–µ–∫—Ü–∏–∏</p>
                    </div>
                    <button className="quiz-banner__button" onClick={handleStartQuiz}>
                        –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç
                    </button>
                </div>
            );
        }

        if (showResults) {
            const score = calculateScore();
            const correctCount = getCorrectAnswersCount();
            
            return (
                <div className="quiz-results">
                    <div className="quiz-results__header">
                        <div className="quiz-results__icon">
                            {score >= 70 ? (
                                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14" stroke="#10B981" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                                    <polyline points="22,4 12,14.01 9,11.01" stroke="#10B981" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                                </svg>
                            ) : (
                                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <circle cx="12" cy="12" r="10" stroke="#EF4444" strokeWidth="2"/>
                                    <line x1="15" y1="9" x2="9" y2="15" stroke="#EF4444" strokeWidth="2"/>
                                    <line x1="9" y1="9" x2="15" y2="15" stroke="#EF4444" strokeWidth="2"/>
                                </svg>
                            )}
                        </div>
                        <h3 className="quiz-results__title">
                            {score >= 70 ? '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' : '–ú–æ–∂–Ω–æ –ª—É—á—à–µ!'}
                        </h3>
                    </div>
                    <div className="quiz-results__stats">
                        <div className="quiz-results__score">{score}%</div>
                        <div className="quiz-results__details">
                            –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correctCount} –∏–∑ {quizQuestions.length}
                        </div>
                    </div>
                    <div className="quiz-results__message">
                        {score >= 70 
                            ? '–í—ã –æ—Ç–ª–∏—á–Ω–æ —É—Å–≤–æ–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –ª–µ–∫—Ü–∏–∏!' 
                            : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑.'
                        }
                    </div>
                    <button 
                        type="button"
                        className="quiz-results__retry-btn" 
                        onClick={handleRetryQuiz}
                        aria-label="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ"
                    >
                        –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞
                    </button>
                </div>
            );
        }

        const currentQuestion = quizQuestions[currentQuestionIndex];
        const getOptionClass = (optionIndex: number) => {
            if (!showAnswerFeedback) {
                return `quiz-option ${selectedAnswer === optionIndex ? 'selected' : ''}`;
            }
            
            const isCorrect = optionIndex === currentQuestion.correctAnswer;
            const isSelected = selectedAnswer === optionIndex;
            
            if (isCorrect) {
                return 'quiz-option correct';
            } else if (isSelected && !isCorrect) {
                return 'quiz-option incorrect';
            } else {
                return 'quiz-option disabled';
            }
        };

        return (
            <div className={`quiz-content ${quizVisible ? 'quiz-content--visible' : ''}`}>
                <div className="quiz-header">
                    <div className="quiz-progress">
                        <div className="quiz-progress__bar">
                            <div 
                                className="quiz-progress__fill"
                                style={{ width: `${((currentQuestionIndex + 1) / quizQuestions.length) * 100}%` }}
                            />
                        </div>
                        <span className="quiz-progress__text">
                            –í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {quizQuestions.length}
                        </span>
                    </div>
                    
                    {!showAnswerFeedback && (
                        <button 
                            className="quiz-hint-btn-corner"
                            onClick={handleShowHint}
                            title="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"
                        >
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round"/>
                                <path d="M9.09 9C9.3251 8.33167 9.78915 7.76811 10.4 7.40913C11.0108 7.05016 11.7289 6.91894 12.4272 7.03871C13.1255 7.15849 13.7588 7.52152 14.2151 8.06353C14.6713 8.60553 14.9211 9.29152 14.92 10C14.92 12 11.92 13 11.92 13" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round"/>
                                <path d="M12 17H12.01" stroke="currentColor" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                        </button>
                    )}
                </div>
                
                <h3 className="quiz-question">{currentQuestion.question}</h3>
                
                {showHint && !showAnswerFeedback && (
                    <div className="quiz-hint-message">
                        {currentQuestion.hint}
                    </div>
                )}
                
                <div className="quiz-options">
                    {currentQuestion.options.map((option, index) => (
                        <button
                            key={index}
                            className={getOptionClass(index)}
                            onClick={() => handleAnswerSelect(index)}
                            disabled={showAnswerFeedback}
                        >
                            <span className="quiz-option__text">{option}</span>
                            {showAnswerFeedback && index === currentQuestion.correctAnswer && (
                                <span className="quiz-option__icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <polyline points="20,6 9,17 4,12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                                    </svg>
                                </span>
                            )}
                            {showAnswerFeedback && selectedAnswer === index && index !== currentQuestion.correctAnswer && (
                                <span className="quiz-option__icon">
                                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <line x1="18" y1="6" x2="6" y2="18" stroke="currentColor" strokeWidth="2"/>
                                        <line x1="6" y1="6" x2="18" y2="18" stroke="currentColor" strokeWidth="2"/>
                                    </svg>
                                </span>
                            )}
                        </button>
                    ))}
                </div>

                {showAnswerFeedback && (
                    <div className={`quiz-feedback ${selectedAnswer === currentQuestion.correctAnswer ? 'quiz-feedback--correct' : 'quiz-feedback--incorrect'}`}>
                        {selectedAnswer === currentQuestion.correctAnswer ? (
                            <span>üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</span>
                        ) : (
                            <span>‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—ã–¥–µ–ª–µ–Ω –∑–µ–ª—ë–Ω—ã–º.</span>
                        )}
                    </div>
                )}
                
                <div className="quiz-navigation">
                    {!showAnswerFeedback ? (
                        <div className="quiz-main-actions">
                            <button 
                                className="quiz-submit-btn"
                                onClick={handleAnswerSubmit}
                                disabled={selectedAnswer === null}
                            >
                                {currentQuestionIndex === quizQuestions.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç' : '–û—Ç–≤–µ—Ç–∏—Ç—å'}
                            </button>
                        </div>
                    ) : (
                        <div className="quiz-feedback-actions">
                            <button 
                                className="quiz-submit-btn quiz-submit-btn--waiting"
                                disabled
                            >
                                {currentQuestionIndex === quizQuestions.length - 1 ? '–ó–∞–≤–µ—Ä—à–∞–µ–º...' : '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å...'}
                            </button>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    const handleLectureComplete = async (lectureId: string) => {
        if (!user || !course) return;
        await progressService.updateProgress(course.id, lectureId, user.id);
    };

    if (loading) {
        return <div>Loading...</div>;
    }

    if (!course || !lecture) {
        return <div>Lecture not found</div>;
    }

    return (
        <div className="lecture-page">
            <Header/>
            <LessonContent>
                <CourseTitle title={lecture.title}/>

                <LessonNavigation
                    prevLesson={navigationProps.prevLesson}
                    nextLesson={navigationProps.nextLesson}
                />

                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–∞–π–¥—ã */}
                {(() => {
                    const hasSlides = lecture.presentationSlides && lecture.presentationSlides.length > 0;
                    const hasVideo = lecture.videoUrl && lecture.videoUrl.trim() !== '';
                    
                    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ª–µ–∫—Ü–∏–∏:', {
                        hasSlides,
                        hasVideo,
                        presentationSlides: lecture.presentationSlides,
                        videoUrl: lecture.videoUrl,
                        slidesLength: lecture.presentationSlides?.length
                    });
                    
                    if (hasSlides) {
                        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é:', lecture.presentationSlides);
                        return <Presentation slides={lecture.presentationSlides!}/>;
                    } else if (!hasVideo) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Å–ª–∞–π–¥–æ–≤, –Ω–∏ –≤–∏–¥–µ–æ
                        console.log('–ù–µ—Ç –Ω–∏ —Å–ª–∞–π–¥–æ–≤, –Ω–∏ –≤–∏–¥–µ–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é');
                        return <Presentation slides={[
                            'https://i.ibb.co/S4VVxzVx/React-pptx.png',
                            'https://i.ibb.co/PsjHbd7h/React-pptx-1.png',
                            'https://i.ibb.co/jvGthHX6/React-pptx-2.png',
                            'https://i.ibb.co/JhC72Mr/React-pptx-3.png',
                            'https://i.ibb.co/jPxNW3Lk/React-pptx-4.png'
                        ]}/>;
                    } else {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ—Ç —Å–ª–∞–π–¥–æ–≤ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, –ø–æ–∫–∞–∂–µ–º –≤–∏–¥–µ–æ –Ω–∏–∂–µ
                        console.log('–ï—Å—Ç—å –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ—Ç —Å–ª–∞–π–¥–æ–≤ - —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é');
                        return null;
                    }
                })()}
                
                {/* <div className="lecture-teachers">
                    <div className="lecture-teachers__avatars">
                        {lecture.teachers.map((teacher: Teacher) => (
                            <div 
                                key={teacher.id}
                                className="lecture-teacher"
                            >
                                <div className="lecture-teacher__container">
                                    <div className="lecture-teacher__avatar">
                                        <img 
                                            src={teacher.photo} 
                                            alt={teacher.name} 
                                            className="lecture-teacher__image"
                                        />
                                    </div>
                                    <span className="lecture-teacher__name">{teacher.name}</span>
                                    <div className="lecture-teacher__tooltip">
                                        <div className="lecture-teacher__tooltip-content">
                                            <img 
                                                src={teacher.photo} 
                                                alt={teacher.name} 
                                                className="lecture-teacher__tooltip-image"
                                            />
                                            <div className="lecture-teacher__tooltip-text">
                                                <div className="lecture-teacher__tooltip-name">@{teacher.name}</div>
                                                <div className="lecture-teacher__tooltip-description">{teacher.description}</div>
                                                <button 
                                                onClick={() => navigate(`/teachers/${teacher.id}`)} 
                                                className="lecture-teacher__tooltip-button"
                                                >
                                                view profile
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div> */}

                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–µ–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ –∏ –Ω–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ */}
                {(() => {
                    const hasSlides = lecture.presentationSlides && lecture.presentationSlides.length > 0;
                    const hasVideo = lecture.videoUrl && lecture.videoUrl.trim() !== '';
                    const shouldShowPlayer = hasVideo && !hasSlides;
                    
                    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞:', {
                        shouldShowPlayer,
                        hasSlides,
                        hasVideo,
                        videoUrl: lecture.videoUrl,
                        presentationSlides: lecture.presentationSlides,
                        slidesLength: lecture.presentationSlides?.length
                    });
                    
                    if (shouldShowPlayer) {
                        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä –¥–ª—è –ª–µ–∫—Ü–∏–∏ —Å –≤–∏–¥–µ–æ');
                        return (
                            <CoursePlayer
                                courseId={course.id}
                                userId={user?.id || 'user_default_1'}
                                lectures={course.lectures?.map(l => ({
                                    ...l,
                                    id: l.id.toString(),
                                    duration: 600, // Default duration in seconds
                                    videoUrl: l.videoUrl || ''
                                })) || []}
                                currentLectureId={lecture.id.toString()}
                                onLectureComplete={handleLectureComplete}
                                course={course}
                            />
                        );
                    } else {
                        console.log('–°–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä - –Ω–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è');
                        return null;
                    }
                })()}

                {renderQuizContent()}

                <div className="rating-section">
                    <h3>–û—Ü–µ–Ω–∏—Ç–µ –ª–µ–∫—Ü–∏—é</h3>
                    <LikeDislike 
                        likes={likes}
                        userRating={userRating}
                        isAuthenticated={isAuthenticated}
                        onLike={handleLike}
                        onDislike={handleDislike}
                        onAuthPrompt={openAuthModal}
                    />
                </div>

                <LectureComments
                    lectureId={parseInt(lectureId!)}
                    courseId={parseInt(courseId!)}
                />
            </LessonContent>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
            <AuthModal 
                isOpen={isAuthModalOpen} 
                onClose={closeAuthModal} 
            />



             {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–∏ –¥–∏–∑–ª–∞–π–∫–µ */}
             <FeedbackModal 
                isOpen={isFeedbackModalOpen} 
                onClose={closeFeedbackModal}
                onSubmit={handleFeedbackSubmit}
            />
        </div>
    );
};

export default LecturePage; 